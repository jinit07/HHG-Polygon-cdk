---
# Deployment parameters.
# The deployment process is divided into various stages.

# Deploy local L1.
deploy_l1: false

# Deploy zkevm contracts on L1 (and also fund accounts).
deploy_zkevm_contracts_on_l1: true

# Deploy zkevm node and cdk peripheral databases.
deploy_databases: true

# Deploy cdk central/trusted environment.
deploy_cdk_central_environment: true

# Deploy cdk/bridge infrastructure.
deploy_cdk_bridge_infra: true

# Deploy permissionless node.
deploy_zkevm_permissionless_node: false

# # Deploy cdk-erigon node.
# deploy_cdk_erigon_node: true

# Deploy observability stack.
deploy_observability: true

# Deploy Blockscout stack.
deploy_l2_blockscout: false

# Deploy eth load balancer.
deploy_blutgang: false

# Apply workload to the different components of the CDK stack.
apply_workload: false

args:
  # Suffix appended to service names.
  # Note: It should be a string.
  deployment_suffix: "-001"

  # Sequence type. Choose from ["erigon", "zkevm-node"]
  sequencer_type: "erigon"

  # The type of data availability to use.
  # Options:
  # - 'rollup': Transaction data is stored on-chain on L1.
  # - 'cdk-validium': Transaction data is stored off-chain using the CDK DA layer and a DAC.
  # In the future, we would like to support external DA protocols such as Avail, Celestia and Near.
  data_availability_mode: cdk-validium

  # Docker images and repositories used to spin up services.
  zkevm_prover_image: hermeznetwork/zkevm-prover:v6.0.3-RC18
  # zkevm_prover_image: hermeznetwork/zkevm-prover:v4.0.19

  zkevm_node_image: hermeznetwork/zkevm-node:v0.7.0
  cdk_validium_node_image: 0xpolygon/cdk-validium-node:0.7.0-cdk
  cdk_node_image: ghcr.io/0xpolygon/cdk:0.0.9

  zkevm_da_image: 0xpolygon/cdk-data-availability:0.0.7
  # zkevm_da_image: 0xpolygon/cdk-data-availability:0.0.6

  zkevm_contracts_image: leovct/zkevm-contracts # the tag is automatically replaced by the value of /zkevm_rollup_fork_id/

  zkevm_agglayer_image: 0xpolygon/agglayer:0.1.3
  # zkevm_agglayer_image: ghcr.io/agglayer/agglayer-rs:main
  zkevm_bridge_service_image: hermeznetwork/zkevm-bridge-service:v0.4.2
  panoptichain_image: minhdvu/panoptichain:0.1.47
  zkevm_bridge_ui_image: leovct/zkevm-bridge-ui:multi-network
  zkevm_bridge_proxy_image: haproxy:2.9.9-bookworm
  zkevm_sequence_sender_image: "hermeznetwork/zkevm-sequence-sender:v0.2.0-RC4"
  cdk_erigon_node_image: hermeznetwork/cdk-erigon:2.0.0-beta13
  toolbox_image: leovct/toolbox:0.0.1

  # Port configuration.
  zkevm_hash_db_port: 50061
  zkevm_executor_port: 50071
  zkevm_aggregator_port: 50081
  zkevm_pprof_port: 6060
  zkevm_prometheus_port: 9091
  zkevm_data_streamer_port: 6900
  zkevm_rpc_http_port: 8123
  zkevm_rpc_ws_port: 8133
  zkevm_bridge_rpc_port: 8080
  zkevm_bridge_grpc_port: 9090
  zkevm_bridge_ui_port: 80
  zkevm_agglayer_port: 4444
  zkevm_dac_port: 8484
  blockscout_public_port: 50101

  # Addresses and private keys of the different components.
  # They have been generated using the following command:
  # polycli wallet inspect --mnemonic 'lab code glass agree maid neutral vessel horror deny frequent favorite soft gate galaxy proof vintage once figure diary virtual scissors marble shrug drop' --addresses 9 | tee keys.txt | jq -r '.Addresses[] | [.ETHAddress, .HexPrivateKey] | @tsv' | awk 'BEGIN{split("sequencer,aggregator,claimtxmanager,timelock,admin,loadtest,agglayer,dac,proofsigner",roles,",")} {print "zkevm_l2_" roles[NR] "_address: \"" $1 "\""; print "zkevm_l2_" roles[NR] "_private_key: \"0x" $2 "\"\n"}'
  zkevm_l2_sequencer_address: "0x931cAeC64617FC3fe9bDd942E3593EEc134656f5"
  zkevm_l2_sequencer_private_key: "0xa66a964d72b48e8e7452e7388791ef0c5a607b2c4d1271985e6469609348567c"

  zkevm_l2_aggregator_address: "0x3DA95A64CdD783C25A118Ea9417eEf55ec06a7F8"
  zkevm_l2_aggregator_private_key: "0x94f8b61fdcceed1c1ed2abb8745f9a336dbe5d53b7b47a3870932cfd3a69d3f8"

  zkevm_l2_claimtxmanager_address: "0x73537bC84E059a1c9eC12dEA535645c86B9Fa5A3"
  zkevm_l2_claimtxmanager_private_key: "0x810f8f9012a2ec40ff837c324a062ef11590f79700960a3e55e4fc6d9ff408c9"

  zkevm_l2_timelock_address: "0x5b06837A43bdC3dD9F114558DAf4B26ed49842Ed"
  zkevm_l2_timelock_private_key: "0x183c492d0ba156041a7f31a1b188958a7a22eebadca741a7fe64436092dc3181"

  zkevm_l2_admin_address: "0x61984609f38E14dDB0bfebb52c59364d5Ee381C0"
  zkevm_l2_admin_private_key: "0x0819228f44d4aa802f9636b8324381e16ad14471a476650be8acdeb264a333c5"

  zkevm_l2_loadtest_address: "0x325BB230670D93F53f7ada4041b589B11339a1E2"
  zkevm_l2_loadtest_private_key: "0x2230286aef741d5bb03e11f2666a9e6dbc33944659c3bd5f3e641f53884164bf"

  zkevm_l2_agglayer_address: "0xd7b11584aBD02d9251ae9C5860691743D10E213d"
  zkevm_l2_agglayer_private_key: "0xcbc4ef41af4a70bd52b9222f7f7304b909ec80b6f022364977f5eb2e5630eea9"

  zkevm_l2_dac_address: "0x049F8c74592Bb59Efb4D195834e657832D63d7B7"
  zkevm_l2_dac_private_key: "0xa09eb655285784bf121aec12bcc5a3085f1b2d2d8c75ba13e80c526182cc731d"

  zkevm_l2_proofsigner_address: "0xe97481c4723f2325d4DfE322AFbECFcd848Fd1f2"
  zkevm_l2_proofsigner_private_key: "0x4aa53a5b2e7230e9d6804ae2769e0221cc03b6eaf3675fead72d6ab907dbe3b5"

  # Keystore password.
  zkevm_l2_keystore_password: pSnv6Dh5s9ahuzGzH9RoCDrKAMddaX3m

  ## L1 configuration.
  l1_chain_id: 11155111
  l1_preallocated_mnemonic: remember huge bonus elegant scrap tower educate turtle fluid spare seminar culture
  l1_funding_amount: 5ether
  l1_rpc_url: https://eth-sepolia.g.alchemy.com/v2/DC0Sbh6swJg1xs4a5AQnJ6svKHy6UCgj
  l1_ws_url: wss://eth-sepolia.g.alchemy.com/v2/DC0Sbh6swJg1xs4a5AQnJ6svKHy6UCgj
  # https://github.com/kurtosis-tech/ethereum-package/tree/main?tab=readme-ov-file#configuration
  l1_additional_services: [
    # blockscout, # block explorer
    # dora, # beaconchain explorer
    # el_forkmon, # fork monitor tool
  ]
  l1_preset: minimal
  l1_seconds_per_slot: 1

  ## Rollup configuration.

  # The chain id of the new rollup.
  zkevm_rollup_chain_id: 10101

  # The fork id of the new rollup. It indicates the prover (zkROM/executor) version.
  zkevm_rollup_fork_id: 9

  # The address of the rollup manager contract on L1.
  # If specified, the rollup data will be retrieved from this contract instead of using the contracts service.
  # zkevm_rollup_manager_address: ""
  # # The block number at which the rollup manager contract was deployed.
  # zkevm_rollup_manager_block_number: 0
  # # The address of the global exit root contract on L2.
  # zkevm_global_exit_root_l2_address: ""
  # # The address of the Polygon data committee contract on L1.
  # polygon_data_committee_address: ""

  polygon_zkevm_explorer: https://explorer.private/
  l1_explorer_url: https://sepolia.etherscan.io/

  # If this is true, we will automatically deploy an ERC20 contract on
  # L1 to be used at the gasTokenAddress
  zkevm_use_gas_token_contract: false

  ## Permissionless node configuration.
  trusted_sequencer_node_uri: zkevm-node-sequencer-001:6900
  zkevm_aggregator_host: zkevm-node-aggregator-001
  genesis_file: templates/permissionless-node/genesis.json

  ## Tools versions
  polycli_version: v0.1.42

  ## Workload configuration.
  workload_commands: [
    # "polycli_loadtest_on_l2.sh t",  # eth transfers
    # "polycli_loadtest_on_l2.sh 2",  # erc20 transfers
    # "polycli_loadtest_on_l2.sh 7",  # erc721 mints
    # "polycli_loadtest_on_l2.sh v3", # uniswapv3 swaps
    # "polycli_rpcfuzz_on_l2.sh",     # rpc calls
    "bridge.sh", # bridge tokens l1 -> l2 and l2 -> l1
  ]

  ## ETH Load balancer configuration.
  blutgang_image: makemake1337/blutgang:0.3.5
  blutgang_rpc_port: 55555
  blutgang_admin_port: 55556

  ## Observability alerting configuration.
  # slack_alerts:
    # slack_channel: ""
    # slack_token: ""
    # mention_users: ""